#!/usr/bin/env node

import parseArgs from 'minimist';
import path from 'path';
import {existsSync} from 'fs';
import Magnet from '../magnet';
import _ from 'lodash';
import {ExpressEngine} from '../magnet';
import chokidar from 'chokidar';

process.env.NODE_ENV = process.env.NODE_ENV || 'production';

const appDirectory = process.cwd();

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    p: 'port',
    e: 'env',
  },
  boolean: ['h'],
  default: {
    p: 3000,
  },
});

if (argv.help) {
  console.log(`
    Description
      Starts the application in production mode.
    Usage
      $ magnet start <dir> -p <port> -e <environment file path>
    If no directory is provided, the current directory will be assumed.
    Options
      --port, -p      A port number on which to start the application
      --env, -e       Environemnt config file path
      --help, -h      Displays this message
  `);
  process.exit(0);
}

let appEnvironment = {};

if (argv.env) {
  if (existsSync(path.join(appDirectory, argv.env))) {
    appEnvironment = require(path.join(appDirectory, argv.env));
    if (appEnvironment.default) {
      appEnvironment = appEnvironment.default;
    }
  } else {
    console.log('Environment file doesn\'t exist.');
    process.exit(1);
  }
} else {
  appEnvironment = {
    magnet: {
      port: argv.port,
      host: 'localhost',
    },
  };
}

const serverEngine = new ExpressEngine();

let magnet = new Magnet({
  appEnvironment,
  appDirectory,
  serverEngine,
});

// - External Start and Stop
if (existsSync(path.join(appDirectory, 'start.js'))) {
  let startFn = require(path.join(appDirectory, 'start.js'));

  if (startFn.default) {
    startFn = startFn.default;
  }

  magnet.setStartLifecycle(startFn);
}

if (existsSync(path.join(appDirectory, 'stop.js'))) {
  let stopFn = require(path.join(appDirectory, 'stop.js'));

  if (stopFn.default) {
    stopFn = stopFn.default;
  }

  magnet.setStopLifecycle(stopFn);
}

// Stop SIGNTERM
// process.on('SIGTERM', () => {
//   watcher.close();
//   magnet.stop();
// });

// // listen for INT signal e.g. Ctrl-C
// process.on('SIGINT', () => {
//   watcher.close();
//   magnet.stop();
// });

magnet.setupApplication()
      .then((instance) => {
        magnet.start(instance);
      });

const watcher = chokidar.watch(`${appDirectory}/**/*`, {
  ignoreInitial: true,
});

const refreshFiles = _.debounce(() => {
    const d = Date.now();

    const fileGen = new Promise((resolve, reject) => {
      if (magnet) {
        magnet.stop();
      }
      const newEngine = new ExpressEngine();
      const newMagnetConfig = {
        appEnvironment,
        appDirectory,
        serverEngine: newEngine,
      };
      magnet = new Magnet(newMagnetConfig);
      magnet.setupApplication()
            .then((instance) => {
              magnet.start(instance);
            });
      resolve();
    });

    fileGen.then(() => {
      console.log('Time to gen:' + (Date.now() - d) + 'ms');
    });
  }, 200);

watcher.on('change', refreshFiles);
