#!/usr/bin/env node

import {join} from 'path';
import chokidar from 'chokidar';
import childProcess from 'child_process';
import log from '../log';
import pkg from '../../package.json';

const defaultCommand = 'dev';
const commands = new Set([
  defaultCommand,
  'start',
  'build',
  'generate',
  'routes',
]);

let cmd = process.argv[2];
let args;

if (new Set(['--version', '-v']).has(cmd)) {
  console.log(`magnet.js v${pkg.version}`);
  process.exit(0);
}

if (new Set(['--help', '-h']).has(cmd)) {
  console.log(`
    Usage
      $ magnet <command>

    Available commands
      ${Array.from(commands).join(', ')}

    For more information run a command with the --help flag
      $ magnet start --help
  `);
  process.exit(0);
}

if (commands.has(cmd)) {
  args = process.argv.slice(3);
} else {
  cmd = defaultCommand;
  args = process.argv.slice(2);
}

const bin = join(__dirname, 'magnet-' + cmd);

const startProcess = () => {
  const proc = childProcess.fork(
    bin, args, {stdio: 'inherit', customFds: [0, 1, 2]});
  proc.on('close', (code, signal) => {
    if (code !== null) {
      process.exit(code);
    }
    if (signal) {
      if (signal === 'SIGKILL') {
        process.exit(137);
      }
      log.info(false, 'exitting');
      process.exit(1);
    }
    process.exit(0);
  });
  proc.on('error', (err) => {
    log.error(false, err);
    process.exit(1);
  });
  return proc;
};

let proc = startProcess();

if (cmd === 'dev') {
  const watcher = chokidar.watch('**/*', {
    awaitWriteFinish: true,
    cwd: process.cwd(),
    ignored: /node_modules|\.magnet|\.git/,
    ignoreInitial: true,
  });

  let restart = () => {
    log.info(false, 'Found a change, restarting the serverâ€¦');
    proc.removeAllListeners(['close']);
    process.kill(proc.pid, 'SIGTERM');
    proc = startProcess();
  };

  watcher.on('change', restart);
  watcher.on('unlink', restart);
}
